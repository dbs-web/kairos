generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                  Int          @id @default(autoincrement())
  name                String
  email               String       @unique
  password            String
  role                Role         @default(USER)
  avatarGroupId       String
  voiceId             String?
  difyAgent           String?
  difyContentCreation String?
  briefings           Briefing[]
  news                News[]
  suggestions         Suggestion[]
  videos              Video[]
  @@index([role])
}

model Suggestion {
  id        Int        @id @default(autoincrement())
  title     String     @db.VarChar(500)
  date      DateTime   @default(now())
  briefing  String
  userId    Int
  status    Status     @default(EM_ANALISE)
  briefings Briefing[]
  user      User       @relation(fields: [userId], references: [id])

  @@index([userId], map: "Suggestion_userId_fkey")
}

model Briefing {
  id           Int         @id @default(autoincrement())
  suggestionId Int?
  title        String      @db.VarChar(500)
  text         String?     @db.VarChar(5000)
  date         DateTime
  status       Status
  difyStatus   DifyStatus  @default(EM_PRODUCAO)
  difyMessage  String?     @db.VarChar(500)
  userId       Int
  newsId       Int?
  sources      String?     @db.VarChar(5000)
  news         News?       @relation(fields: [newsId], references: [id])
  suggestion   Suggestion? @relation(fields: [suggestionId], references: [id])
  user         User        @relation(fields: [userId], references: [id])

  @@index([suggestionId], map: "Briefing_suggestionId_fkey")
  @@index([newsId], map: "Briefing_newsId_fkey")
  @@index([userId], map: "Briefing_userId_fkey")
}

model News {
  id        Int        @id @default(autoincrement())
  title     String     @db.VarChar(500)
  summary   String     @db.VarChar(1000)
  userId    Int
  url       String     @db.VarChar(500)
  thumbnail String     @db.VarChar(500)
  status    Status
  text      String     @db.VarChar(5000)
  date      DateTime   @default(now())
  Briefing  Briefing[]
  user      User       @relation(fields: [userId], references: [id])

  @@index([userId], map: "News_userId_fkey")
}

model Video {
  id             Int          @id @default(autoincrement())
  userId         Int
  title          String       @db.VarChar(500)
  legenda        String?       @db.VarChar(2000)
  url            String?      @db.VarChar(500)
  heygenErrorMsg String?
  heygenStatus   HeyGenStatus @default(PROCESSING)
  heygenVideoId  String?      @unique
  height         Int
  width          Int
  creationDate   DateTime     @default(now())
  transcription  String       @default("") @db.VarChar(2000)
  user           User         @relation(fields: [userId], references: [id])

  @@index([userId], map: "Video_userId_fkey")  
}

model ApiLog {
  id           Int      @id @default(autoincrement())
  route        String   @db.VarChar(500)
  body         Json?
  error        String?  @db.VarChar(1000)
  responseCode Int?
  time         DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum Status {
  EM_ANALISE
  EM_PRODUCAO
  PRODUZIDO
  APROVADO
  ARQUIVADO
}

enum HeyGenStatus {
  PROCESSING
  SUCCESS
  FAILED
}

enum DifyStatus {
  EM_PRODUCAO
  PRONTO
  ERROR
}